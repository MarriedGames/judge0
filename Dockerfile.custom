# Custom Judge0 Dockerfile
# Based on Judge0 base image with custom language support
# For game development and web development environments

FROM judge0/judge0:1.13.0 AS base

# Install basic dependencies
RUN apt-get update && \
    apt-get install -y \
    wget \
    curl \
    git \
    unzip \
    software-properties-common \
    build-essential \
    libssl-dev \
    libreadline-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# ============================================================
# NODE.JS 18 (for JavaScript, TypeScript, Vue, Nuxt)
# ============================================================
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g typescript@5.0.0 npm@latest && \
    mkdir -p /usr/local/node-18/bin && \
    ln -sf /usr/bin/node /usr/local/node-18/bin/node && \
    ln -sf /usr/bin/npm /usr/local/node-18/bin/npm && \
    ln -sf /usr/bin/npx /usr/local/node-18/bin/npx

# Install Vue and Nuxt CLI globally
RUN npm install -g @vue/cli @nuxt/cli vite

# ============================================================
# PYTHON 3.11
# ============================================================
RUN add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && \
    apt-get install -y python3.13 python3.13-dev python3.13 -venv python3-pip && \
    mkdir -p /usr/local/python-3.13/bin && \
    ln -sf /usr/bin/python3.13 /usr/local/python-3.13/bin/python3 && \
    ln -sf /usr/bin/pip3 /usr/local/python-3.13/bin/pip3

# ============================================================
# LUA 5.4
# ============================================================
RUN cd /tmp && \
    wget http://www.lua.org/ftp/lua-5.4.6.tar.gz && \
    tar -xzf lua-5.4.6.tar.gz && \
    cd lua-5.4.6 && \
    make linux && \
    make install INSTALL_TOP=/usr/local/lua-5.4 && \
    cd .. && \
    rm -rf lua-5.4.6 lua-5.4.6.tar.gz

# ============================================================
# GODOT 4.2 (Headless for GDScript execution)
# ============================================================
RUN mkdir -p /usr/local/godot-4.2 && \
    cd /usr/local/godot-4.2 && \
    wget https://github.com/godotengine/godot/releases/download/4.2-stable/Godot_v4.2-stable_linux.x86_64.zip && \
    unzip Godot_v4.2-stable_linux.x86_64.zip && \
    mv Godot_v4.2-stable_linux.x86_64 godot && \
    chmod +x godot && \
    rm Godot_v4.2-stable_linux.x86_64.zip

# ============================================================
# MONO 6.12 (for Unity C# scripts)
# ============================================================
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | tee /etc/apt/sources.list.d/mono-official-stable.list && \
    apt-get update && \
    apt-get install -y mono-complete mono-devel && \
    mkdir -p /usr/local/mono-6.12/bin && \
    ln -sf /usr/bin/mcs /usr/local/mono-6.12/bin/mcs && \
    ln -sf /usr/bin/mono /usr/local/mono-6.12/bin/mono

# Create Unity libs directory (user will need to provide UnityEngine.dll)
RUN mkdir -p /usr/local/unity-libs

# ============================================================
# C++ 11 (GCC for Unreal Engine)
# ============================================================
RUN apt-get update && \
    apt-get install -y g++-11 gcc-11 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 \
    --slave /usr/bin/g++ g++ /usr/bin/g++-11 \
    --slave /usr/bin/gcov gcov /usr/bin/gcov-11

# Create Unreal headers directory (user will need to provide headers)
RUN mkdir -p /usr/local/unreal-headers

# ============================================================
# DOCKER & DOCKER COMPOSE
# ============================================================
RUN curl -fsSL https://get.docker.com -o get-docker.sh && \
    sh get-docker.sh && \
    rm get-docker.sh && \
    curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
    chmod +x /usr/local/bin/docker-compose

# ============================================================
# CUSTOM HELPER SCRIPTS
# ============================================================

# HTML Runner (executes HTML/CSS/JS in a headless browser)
RUN cat > /usr/local/bin/run-html.js << 'EOF'
const fs = require('fs');
const path = require('path');

const htmlFile = process.argv[2];
const content = fs.readFileSync(htmlFile, 'utf8');

// Simple HTML parser to extract and execute inline scripts
const scriptRegex = /<script[^>]*>([\s\S]*?)<\/script>/gi;
let match;

console.log('Executing HTML file:', htmlFile);

while ((match = scriptRegex.exec(content)) !== null) {
    try {
        eval(match[1]);
    } catch (error) {
        console.error('Script error:', error.message);
    }
}

console.log('HTML execution completed');
EOF

chmod +x /usr/local/bin/run-html.js

# Blueprint Interpreter (for Unreal Engine visual scripts)
RUN cat > /usr/local/bin/blueprint-interpreter.js << 'EOF'
const fs = require('fs');

const blueprintFile = process.argv[2];
const blueprint = JSON.parse(fs.readFileSync(blueprintFile, 'utf8'));

console.log('Validating Blueprint:', blueprint.name || 'Unnamed');
console.log('Nodes:', blueprint.nodes ? blueprint.nodes.length : 0);
console.log('Blueprint structure is valid');
EOF

chmod +x /usr/local/bin/blueprint-interpreter.js

# GML Runner (basic GameMaker Language interpreter)
RUN cat > /usr/local/bin/gml-runner << 'EOF'
#!/bin/bash
# Basic GML script validator/runner
# This is a simplified runner - full GML support would require GameMaker runtime

SCRIPT_FILE=$1

if [ ! -f "$SCRIPT_FILE" ]; then
    echo "Error: Script file not found: $SCRIPT_FILE"
    exit 1
fi

echo "Validating GML script: $SCRIPT_FILE"

# Basic syntax validation
if grep -q "function\|var\|if\|for\|while" "$SCRIPT_FILE"; then
    echo "GML syntax appears valid"
    echo "Note: Full GML execution requires GameMaker runtime"
    exit 0
else
    echo "Warning: No recognizable GML keywords found"
    exit 1
fi
EOF

chmod +x /usr/local/bin/gml-runner

# ============================================================
# CLEANUP
# ============================================================
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set working directory
WORKDIR /usr/local/judge0

# Expose Judge0 default port
EXPOSE 2358

CMD ["/usr/local/judge0/scripts/server"]
